name: bluebuild
on:
  schedule:
    - cron:
        "00 06 * * *" # build at 06:00 UTC every day
        # (20 minutes after last ublue images start building)
  push:
    paths-ignore: # don't rebuild if only documentation has changed
      - "**.md"

  pull_request:
  workflow_dispatch: # allow manually triggering builds
    inputs:
      FORCE_REBUILD:
        description: "Force rebuild even if no changes were made"
        required: false
        default: false
        type: boolean

concurrency:
  # only run one build at a time
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  bluebuild:
    name: Build Custom Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false # stop GH from cancelling all matrix builds if one fails
      matrix:
        variant:
          # !! Add your recipes here
          - gnome
          - plasma
    steps:
      - name: Check updates
        id: check_update
        if: ${{ ! inputs.FORCE_REBUILD }}
        uses: alexiri/update-image-action@1.0
        with:
          imageref: ghcr.io/${{ github.repository_owner }}/${{ matrix.variant == 'gnome' && 'blueshift_v3' || 'blueshift_v3-plasma' }}

      # the build is fully handled by the reusable github action
      - name: Build Custom Image
        #if: false # temporarily disable this step
        if: ${{ steps.check_update.outputs.rebuild-needed == 'true' || inputs.FORCE_REBUILD }}
        uses: blue-build/github-action@4d8b4df657ec923574611eec6fd7e959416c47f0 # v1.8
        with:
          recipe: recipe-${{ matrix.variant }}.yml
          cosign_private_key: ${{ secrets.SIGNING_SECRET }}
          registry_token: ${{ github.token }}
          pr_event_number: ${{ github.event.number }}

          # enabled by default, disable if your image is small and you want faster builds
          maximize_build_space: true
          rechunk: true

      # - name: "Build ISO"
      #   shell: bash
      #   run: |
      #     # Build the ISO image
      #     sudo bluebuild generate-iso --iso-name blueshift_v3.iso image ghcr.io/${{ github.repository_owner }}/blueshift_v3:10

      # - name: Build ISO
      #   uses: alexiri/build-container-installer@pr-1
      #   id: build_iso
      #   if: ${{ steps.check_update.outputs.rebuild-needed == 'true' || inputs.FORCE_REBUILD }}
      #   with:
      #     arch: x86_64
      #     image_name: ${{ matrix.variant == 'gnome' && 'blueshift_v3' || 'blueshift_v3-plasma' }}
      #     image_repo: ghcr.io/${{ github.repository_owner }}
      #     image_tag: 10
      #     version: 10
      #     # version: ${{ env.VERSION }}
      #     # variant: ${{ env.VARIANT }}
      #     iso_name: blueshift_v3-${{ matrix.variant }}-10.iso

      - name: Build ISO
        id: build
        if: ${{ steps.check_update.outputs.rebuild-needed == 'true' || inputs.FORCE_REBUILD }}
        uses: ublue-os/titanoboa@anaconda-webui-format
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.variant == 'gnome' && 'blueshift_v3' || 'blueshift_v3-plasma' }}:10
          # flatpaks-list: ${{ github.workspace }}/system_files/etc/ublue-os/system-flatpaks.list
          hook-post-rootfs: ${{ github.workspace }}/iso/configure_iso.sh

      - name: Rename ISO
        if: ${{ steps.build.outputs.iso-dest }}
        id: rename
        env:
          OUTPUT_PATH: ${{ steps.build.outputs.iso-dest }}
          IMAGE_NAME: ${{ matrix.variant == 'gnome' && 'blueshift_v3' || 'blueshift_v3-plasma' }}-live
          PLATFORM: amd64
          DEFAULT_TAG: 10
        run: |
          set -x
          mkdir -p output
          OUTPUT_DIRECTORY="$(realpath output)"
          if [ $PLATFORM == "amd64" ]; then
            sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${IMAGE_NAME}-${DEFAULT_TAG}.iso-CHECKSUM"
            mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${IMAGE_NAME}-${DEFAULT_TAG}.iso"
          else
            sha256sum "${OUTPUT_PATH}" | tee "${OUTPUT_DIRECTORY}/${IMAGE_NAME}-${DEFAULT_TAG}-${PLATFORM}.iso-CHECKSUM"
            mv "${OUTPUT_PATH}" "${OUTPUT_DIRECTORY}/${IMAGE_NAME}-${DEFAULT_TAG}-${PLATFORM}.iso"
          fi
          echo "output_directory=$OUTPUT_DIRECTORY" >> "${GITHUB_OUTPUT}"

      # This example is for uploading your ISO as a Github artifact. You can do something similar using any cloud storage, so long as you copy the output
      - name: Upload ISO as artifact
        id: upload
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        # if: ${{ steps.build_iso.outputs.iso_path }}
        if: ${{ steps.rename.outputs.output_directory }}
        with:
          # name: ${{ steps.build_iso.outputs.iso_name }}
          # path: |
          #   ${{ steps.build_iso.outputs.iso_path }}
          #   ${{ steps.build_iso.outputs.iso_path }}-CHECKSUM
          name: ${{ matrix.variant == 'gnome' && 'blueshift_v3' || 'blueshift_v3-plasma' }}-10-amd64-iso
          path: ${{ steps.rename.outputs.output_directory }}
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
