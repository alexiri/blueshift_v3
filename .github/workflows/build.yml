name: bluebuild
on:
  schedule:
    - cron:
        "00 06 * * *" # build at 06:00 UTC every day
        # (20 minutes after last ublue images start building)
  push:
    paths-ignore: # don't rebuild if only documentation has changed
      - "**.md"

  pull_request:
  workflow_dispatch: # allow manually triggering builds
    inputs:
      FORCE_REBUILD:
        description: "Force rebuild even if no changes were made"
        required: false
        default: false
        type: boolean

concurrency:
  # only run one build at a time
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check_update:
    name: Check for Updates
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.check_update.outputs.res }}
    steps:
      - name: Check for Updates
        id: check_update
        shell: bash
        run: |
          if [ "${{ inputs.FORCE_REBUILD }}" = "true" ]; then
            echo "FORCE_REBUILD is true, skipping update check"
            echo "res=-1" >> "$GITHUB_OUTPUT"
            exit
          fi

          # 'dnf check-update'
          # exit codes:
          #   0 - no updates
          #   100 - updates available
          #   125 - tag/platform not found
          #   127 - command not found
          res=0
          podman run --quiet --rm ghcr.io/${{ github.repository_owner }}/blueshift_v3:10 dnf check-update || res=$?
          echo "res=${res}" >> "$GITHUB_OUTPUT"
          echo "Exit code: '$res'"

  bluebuild:
    name: Build Custom Image
    runs-on: ubuntu-latest
    needs: check_update
    if: needs.check_update.outputs.update != '0'
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false # stop GH from cancelling all matrix builds if one fails
      matrix:
        recipe:
          # !! Add your recipes here
          - recipe-gnome.yml
          - recipe-plasma.yml
    steps:
      # the build is fully handled by the reusable github action
      - name: Build Custom Image
        #if: false # temporarily disable this step
        uses: blue-build/github-action@v1.8
        with:
          recipe: ${{ matrix.recipe }}
          cosign_private_key: ${{ secrets.SIGNING_SECRET }}
          registry_token: ${{ github.token }}
          pr_event_number: ${{ github.event.number }}

          # enabled by default, disable if your image is small and you want faster builds
          maximize_build_space: true
          rechunk: true

      # - name: "Build ISO"
      #   shell: bash
      #   run: |
      #     # Build the ISO image
      #     sudo bluebuild generate-iso --iso-name blueshift_v3.iso image ghcr.io/${{ github.repository_owner }}/blueshift_v3:10

      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: build_iso
        with:
          arch: x86_64
          image_name: blueshift_v3
          image_repo: ghcr.io/${{ github.repository_owner }}
          image_tag: 10
          # version: ${{ env.VERSION }}
          # variant: ${{ env.VARIANT }}
          iso_name: blueshift_v3-10-${{ matrix.recipe }}.iso

      # This example is for uploading your ISO as a Github artifact. You can do something similar using any cloud storage, so long as you copy the output
      - name: Upload ISO as artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_iso.outputs.iso_name }}
          path: |
            ${{ steps.build_iso.outputs.iso_path }}
            ${{ steps.build_iso.outputs.iso_path }}-CHECKSUM
          if-no-files-found: error
          retention-days: 0
          compression-level: 0

      - name: Write summary
        id: summary
        shell: bash
        run: |
          echo "- ISO: ${{ steps.upload.outputs.artifact-url }} (${{ steps.upload.outputs.artifact-digest }})" >> $GITHUB_STEP_SUMMARY